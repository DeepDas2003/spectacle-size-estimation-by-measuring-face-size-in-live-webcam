def mlmodel(face_height,face_width,pd,nose_width):
   data=pd.read_csv('face_size_vs_spec_size.csv')
   data.head()
   data.replace({'frame_size_category':{'Extra Narrow':-2,'Narrow':-1,'Medium':0,'Wide':1,'Extra Wide':2}},inplace=True)
   from sklearn.model_selection import train_test_split
   x=data.drop(['face_width_mm','face_height_mm','pd_mm','nose_width_mm'], axis=1)
   y=data['frame_size_category']
   x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.2,random_state=2)
   lin_reg_model=LinearRegression()
   lin_reg_model.fit(x_train,y_train)
   from sklearn.tree import DecisionTreeClassifier
   from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

   # Initialize and train the Decision Tree Classifier
   # Note: You might want to tune the model parameters for better performance.
   dt_classifier = DecisionTreeClassifier(random_state=2)
   dt_classifier.fit(x_train, y_train)

   # Make predictions on the test set
   y_pred_classification = dt_classifier.predict(x_test)
   user_data = pd.DataFrame({
        'face_width_mm': [face_width],
        'face_height_mm': [face_height],
        'pd_mm': [pd],
        'nose_width_mm': [nose_width]
    })

    # Make a prediction using the trained dt_classifier model
   prediction = dt_classifier.predict(user_data)

    # Map the numerical prediction back to the original category labels
    # Assuming you used the mapping: -2: Extra Narrow, -1: Narrow, 0: Medium, 1: Wide, 2: Extra Wide
   category_map = {-2: 'Extra Narrow', -1: 'Narrow', 0: 'Medium', 1: 'Wide', 2: 'Extra Wide'}
   predicted_category = category_map.get(prediction[0], "Unknown Category")
